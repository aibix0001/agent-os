# GitLab CI Security Template for Agent OS
# 
# This template provides security scanning jobs that should be included
# in all GitLab CI pipelines. It runs before the build stage to catch
# security issues early in the development process.
#
# Usage:
# In your .gitlab-ci.yml file, include this template:
#
# include:
#   - project: 'your-group/agent-os'
#     ref: main
#     file: '/templates/gitlab-ci-security.yml'
#
# Or if using a local copy:
#
# include:
#   - local: '.agent-os/templates/gitlab-ci-security.yml'

stages:
  - security

# Scan for known compromised package versions
dependency-scan:
  stage: security
  image: node:20-bullseye
  script:
    - |
      set -euo pipefail
      echo "üîç Scanning for compromised package versions..."
      
      # Known compromised package versions regex
      VULN_REGEX='eslint-config-prettier@\(8\.10\.1\|9\.1\.1\|10\.1\.\(6\|7\)\)|eslint-plugin-prettier@4\.2\.\(2\|3\)|synckit@0\.11\.9|@pkgr/core@0\.2\.8|napi-postinstall@0\.3\.1|got-fetch@5\.1\.\(11\|12\)|is@\(3\.3\.1\|5\.0\.0\)'
      
      # Search for vulnerable packages
      matches=$(grep -R --line-number -E "$VULN_REGEX" --exclude-dir=.git --exclude='*.lock' . || true)
      
      if [[ -n "$matches" ]]; then
        echo "‚ùå Compromised packages found:"
        echo "$matches"
        exit 3
      else
        echo "‚úÖ No compromised package versions found."
      fi
  allow_failure: false
  tags:
    - docker

# Trivy vulnerability scanner
trivy-scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - |
      echo "üîç Running Trivy vulnerability scan..."
      trivy fs --severity HIGH,CRITICAL --exit-code 1 .
  allow_failure: false
  tags:
    - docker
  only:
    - merge_requests
    - main
    - develop

# Language-specific security scans
language-security-scan:
  stage: security
  image: node:20-bullseye
  before_script:
    - apt-get update && apt-get install -y python3 python3-pip ruby
  script:
    - |
      echo "üîç Running language-specific security scans..."
      
      # Node.js projects
      if [ -f "package-lock.json" ]; then
        echo "üì¶ Running npm audit..."
        npm audit --audit-level=moderate || exit_code=$?
        if [ "${exit_code:-0}" -ne 0 ]; then
          echo "‚ùå npm audit found vulnerabilities"
          exit 1
        fi
      fi
      
      # Ruby projects
      if [ -f "Gemfile.lock" ]; then
        echo "üíé Running bundle audit..."
        gem install bundle-audit
        bundle audit check --update || exit_code=$?
        if [ "${exit_code:-0}" -ne 0 ]; then
          echo "‚ùå bundle audit found vulnerabilities"
          exit 1
        fi
      fi
      
      # Python projects
      if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
        echo "üêç Running pip-audit..."
        pip3 install pip-audit
        pip-audit || exit_code=$?
        if [ "${exit_code:-0}" -ne 0 ]; then
          echo "‚ùå pip-audit found vulnerabilities"
          exit 1
        fi
      fi
      
      echo "‚úÖ Language-specific security scans completed"
  allow_failure: false
  tags:
    - docker

# Secret detection
secret-detection:
  stage: security
  image: trufflesecurity/trufflehog:latest
  script:
    - |
      echo "üîç Scanning for exposed secrets..."
      trufflehog git file://. --only-verified --fail || exit_code=$?
      if [ "${exit_code:-0}" -eq 183 ]; then
        echo "‚ùå Verified secrets found in repository!"
        exit 1
      elif [ "${exit_code:-0}" -ne 0 ] && [ "${exit_code:-0}" -ne 183 ]; then
        echo "‚ö†Ô∏è TruffleHog scan failed with exit code: $exit_code"
        exit 1
      else
        echo "‚úÖ No verified secrets found"
      fi
  allow_failure: false
  tags:
    - docker

# SAST (Static Application Security Testing)
sast-scan:
  stage: security
  image: returntocorp/semgrep
  script:
    - |
      echo "üîç Running SAST scan with Semgrep..."
      semgrep --config=auto --severity=ERROR --error
  allow_failure: false
  tags:
    - docker
  only:
    - merge_requests
    - main
    - develop

# License compliance check
license-check:
  stage: security
  image: licensefinder/license_finder:latest
  script:
    - |
      echo "üìú Checking license compliance..."
      license_finder || true
      echo "‚ÑπÔ∏è Review license report above for compliance"
  allow_failure: true
  tags:
    - docker
  only:
    - merge_requests
    - main